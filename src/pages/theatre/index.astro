---
// popular games

import TheatreSearchBar from "@components/TheatreSearchBar";
import themeStyles from "@styles/ThemeElements.module.scss";
import categories, { type Category } from "@lib/gameCategories";
import styles from "@styles/TheatreCategory.module.scss";
import ArrowForward from "@icons/arrow_forward_24dp.svg?svgmin";
import MainLayout from "@layouts/MainLayout.astro";
import { dbEnabled, theatreAPI, theatreAPIMirror } from "@lib/theatre";
import type { CategoryData, TheatreEntryMin } from "@lib/TheatreAPI";
import TheatreItem from "@components/TheatreItem.astro";

const entryLimit = 8;

const categoryQuery = categories.map((category) => category.id).join(",");

let mirrorError = false;

let data: CategoryData | undefined;

if (dbEnabled) {
  data = await theatreAPI.list({
    sort: "plays",
    category: categoryQuery,
    limitPerCategory: entryLimit,
  });
} else
  try {
    data = await theatreAPIMirror.list({
      sort: "plays",
      category: categoryQuery,
      limitPerCategory: entryLimit,
    });
  } catch (err) {
    mirrorError = true;
    console.error(err);

    // refresh after 5 seconds
    Astro.response.headers.set("reload", "5");
    Astro.response.status = 500;
  }

const renderCategories: { category: Category; entries: TheatreEntryMin[] }[] =
  [];

if (data !== undefined)
  for (const category of categories) {
    const entries = data.entries.filter((e) =>
      e.category.includes(category.id)
    );

    // hide empty categories
    if (entries.length !== 0)
      renderCategories.push({
        category,
        entries,
      });
  }
---

<MainLayout title="Popular Games">
  {
    mirrorError ? (
      <main>
        <p>An error occurred while trying to access the theatre API mirror.</p>
        <p>This page will refresh in 5 seconds.</p>
      </main>
    ) : (
      <>
        {Astro.locals.isMainWebsite && (
          <Fragment slot="head">
            <meta
              name="description"
              content="Popular games on Holy Unblocker."
            />
          </Fragment>
        )}
        <main class={styles.main}>
          <TheatreSearchBar client:load />
          {renderCategories.map(({ category, entries }) => (
            <section class={styles.expand}>
              <div class={styles.name}>
                <h1>{category.name}</h1>
                <a
                  class={themeStyles.themeLink}
                  href={`/theatre/${category.id}`}
                  class={styles.seeAll}
                >
                  See All
                  <ArrowForward />
                </a>
              </div>
              <div class:list={[styles.items, styles.flex]}>
                {entries.map((e) => (
                  <TheatreItem name={e.name} id={e.id} />
                ))}
              </div>
            </section>
          ))}
        </main>
      </>
    )
  }
</MainLayout>
