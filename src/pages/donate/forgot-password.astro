---
import "@styles/donator.scss";
import MainLayout from "@layouts/MainLayout.astro";
import InputPassword from "@components/InputPassword.astro";
import Banner from "@components/Banner.astro";
import ArrowBackIcon from "@icons/arrow_back_FILL0_wght400_GRAD0_opsz24.svg?react";
import { db } from "@lib/db";
import {
  m,
  canSendEmail,
  generateVerificationSecret,
  hashPassword,
  sendPasswordVerification,
  validateEmail,
  validatePassword,
} from "@lib/util";

const { user, ip, acc } = Astro.locals;
if (await acc.isBanned()) return acc.toBan();
if (user) return acc.toDash();

let error: string | undefined;
let success: string | undefined;
let passwordReset = false;

const secret = Astro.url.searchParams.get("secret") || "";

const resetUser =
  secret === ""
    ? undefined
    : (
        await db.query<m.UserModel>(
          "SELECT * FROM users WHERE password_verification_secret = $1;",
          [secret]
        )
      ).rows[0];

if (secret && !resetUser) error = "The link you received is invalid.";

if (Astro.request.method === "POST")
  try {
    const data = await Astro.request.formData();
    error = undefined;

    if (secret && resetUser) {
      // resetUser exists and we're changing the password
      const password = data.get("password")?.toString() || "";
      const confirmPassword = data.get("confirm")?.toString();

      if (password !== confirmPassword) error = "Passwords are not the same.";

      if (!error) error = validatePassword(password);

      if (!error) {
        await db.query(
          "UPDATE users SET password_verification_secret = null, password_hash = $1 WHERE id = $2;",
          [await hashPassword(password), resetUser.id]
        );

        passwordReset = true;
        success = "Password changed!";
      }
    }
    // try to send password reset email
    else {
      const email = data.get("email")?.toString().trim() || "";
      error = validateEmail(email);

      if (!error) {
        const user = (
          await db.query<m.UserModel>("SELECT * FROM users WHERE email = $1;", [
            email,
          ])
        ).rows[0];

        if (user) {
          error = await canSendEmail(user, user.email, ip);

          if (!error) {
            const verificationSecret = generateVerificationSecret();
            await db.query(
              "UPDATE users SET password_verification_secret = $1 WHERE id = $2;",
              [verificationSecret, user.id]
            );
            await sendPasswordVerification(email, verificationSecret);
          }
        }

        // don't let them know if the email exists or not
        success =
          "If an account with that email exists, we sent instructions to reset your password to your inbox. If you don't receive it, check your spam filters and make sure you entered the email correctly.";
      }
    }
  } catch (err) {
    // @ts-ignore
    if (err?.code === "P2002") {
      error = "Email already exists.";
    } else {
      console.error("caught err:");
      console.error(err);
    }
  }
---

<MainLayout>
  <main>
    {
      secret && resetUser ? (
        <>
          <h1 class="page-title sub">Change your password</h1>
          <Banner success={success} error={error} />
          <p>Email: {resetUser.email}</p>
          <form class="change-form" method="post">
            <input type="text" name="email" value={resetUser.email} hidden />
            <label class="manage-field">
              <div>Email</div>
              <InputPassword
                id="password"
                name="password"
                confirm="confirmPassword"
                validate
              />
            </label>
            <label class="manage-field">
              <div>New Password</div>
              <InputPassword
                id="password"
                name="password"
                confirm="confirmPassword"
                validate
              />
            </label>
            <label class="manage-field">
              <div>Confirm Password</div>
              <input
                type="password"
                id="confirmPassword"
                class="prettyinput"
                name="confirm"
              />
            </label>
            <input
              type="submit"
              class="prettysubmit"
              value="Change Password"
              id="submit"
            />
          </form>
        </>
      ) : (
        <>
          <h1 class="page-title sub">
            <a
              class="back-button"
              href="/donate/login"
              set:html={ArrowBackIcon}
            />
            Password Reset
          </h1>
          {passwordReset && (
            <p class="prettybanner success">
              Your password has been reset. You may now login with your new
              password. Click <a href="/donate/login">here</a> to login.
            </p>
          )}
          <Banner success={success} error={error} />
          <p>
            If you've forgotten your Holy Unblocker password, you can enter your
            account email here to start the reset process.
          </p>
          <form class=" card" method="post">
            <label
              class="input"
              style={{ display: "block", marginBottom: "10px" }}
            >
              <div>Email</div>
              <input type="email" class="prettyinput code" name="email" />
            </label>
            <input class="prettysubmit" type="submit" value="Reset" />
          </form>
        </>
      )
    }
  </main>
</MainLayout>
