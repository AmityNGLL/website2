---
import themeStyles from "@styles/ThemeElements.module.scss";
import styles from "@styles/ProxyOmnibox.module.scss";
import searchEngines from "@lib/searchEngines";
import ServiceFrame from "@components/ServiceFrame.astro";
import appDefs from "@icons/appDefs.svg?react";
import ClientAPIs from "./ClientAPIs.astro";

const engine = searchEngines[Astro.locals.searchEngine];
---

<ClientAPIs />
<form
  class={styles.omnibox}
  id="omnibox"
  data-search-format={engine.format}
  transition:persist
>
  <div class={`${themeStyles.ThemeInputBar} ${styles.inputBar}`}>
    <div class={themeStyles.icon}>
      <svg>
        <use href="#searchGlass"></use>
      </svg>
    </div>
    <input
      type="text"
      placeholder={`Search ${engine.name} or type a URL`}
      required
      autocomplete="off"
      class={themeStyles.thinPadLeft}
    />
  </div>
  <div class={styles.suggested} id="omniboxSuggest"></div>
</form>
<Fragment set:html={appDefs} />
<ServiceFrame />
<script>
  import SearchBuilder from "@lib/SearchBuilder";
  import { renderSearchResult } from "@lib/searchResult";

  type SearchProvider = "bing" | "duckduckgo";

  const searchProvider: SearchProvider = "duckduckgo";

  // simple API used for fetching duckduckgo search results
  async function sillyfetch(url: string, opts?: { signal: AbortSignal }) {
    const s = (await fetch("/api/sillyfetch", {
      method: "POST",
      body: url,
      signal: opts?.signal,
    })) as Response & { sillyurl: string };

    s.sillyurl = s.headers.get("x-url")!;

    return s;
  }

  let resultIndex = -1;
  let lastQuery: string | undefined;

  // reuse the same function
  function entryClick(this: HTMLDivElement, event: MouseEvent) {
    const inputBar = document.querySelector<HTMLInputElement>("input")!;
    const dest = this.textContent!;
    inputBar.value = dest;
    inputBar.focus();
    event.preventDefault();
  }

  const renderOmniboxSearchResult = (result: string, query: string) => {
    const e = renderSearchResult(result, query);
    e.addEventListener("mousedown", entryClick, { capture: true });
    return e;
  };

  declare global {
    var setInputFocused: (newFocused: boolean) => void;
  }

  window.addEventListener("click", (event) => {
    const form = document.querySelector<HTMLFormElement>("#omnibox");
    if (form && !form.contains(event.target as any)) setInputFocused(false);
  });

  document.addEventListener("astro:page-load", () => {
    const form = document.querySelector<HTMLFormElement>("#omnibox");
    if (!form) return;
    resultIndex = -1;
    lastQuery = undefined;

    const searchEngineFormat = form.getAttribute("data-search-format")!;
    const builder = new SearchBuilder(searchEngineFormat);
    const inputBar = form.querySelector<HTMLInputElement>("input")!;
    const suggest = document.querySelector<HTMLDivElement>("#omniboxSuggest")!;

    window.setInputFocused = (inputFocused: boolean) => {
      resultIndex = -1;
      lastQuery = undefined;
      if (inputFocused) {
        getSearchResults(inputBar.value);
        form.setAttribute("data-focused", "");
      } else {
        suggest.innerHTML = "";
        form.removeAttribute("data-focused");
        form.removeAttribute("data-suggested");
      }
    };

    function updateResults() {
      for (let i = 0; i < suggest.children.length; i++) {
        const e = suggest.children[i];
        if (i === resultIndex) e.setAttribute("data-hover", "");
        else e.removeAttribute("data-hover");
      }
    }

    inputBar.addEventListener("keydown", (event) => {
      switch (event.code) {
        case "Escape":
          setInputFocused(false);
          break;
        case "ArrowDown":
          event.preventDefault();
          if (resultIndex === suggest.children.length - 1) resultIndex = 0;
          else resultIndex++;
          updateResults();
          break;
        case "ArrowUp":
          event.preventDefault();
          if (resultIndex <= 0) resultIndex = suggest.children.length - 1;
          else resultIndex -= 1;
          updateResults();
          break;
        case "Enter":
          {
            event.preventDefault();
            if (!suggest.children.length) break;
            const result = suggest.children[resultIndex];
            if (result) {
              const src = builder.query(result.textContent!);
              setInputFocused(false);
              setServiceSrc(src);
              event.preventDefault();
            }
          }
          break;
      }
    });

    inputBar.addEventListener("focus", () => {
      setInputFocused(true);
    });

    inputBar.addEventListener("blur", () => {
      setTimeout(() => {
        setInputFocused(false);
      }, 100);
    });

    const omniboxSubmit = (search: string) => {
      const src = builder.query(search);
      inputBar.blur();
      setServiceSrc(src);
    };

    // set src using search params
    // allow querying omnibox
    // eg: https://holyubofficial.net/?q=hello+world will search for "Hello World"
    const query = new URLSearchParams(location.search).get("q");
    if (query !== null) {
      const src = new SearchBuilder(searchEngineFormat).query(query);
      setServiceSrc(src);
    }

    form.addEventListener("submit", (event) => {
      event.preventDefault();
      omniboxSubmit(inputBar.value);
    });

    let abort = new AbortController();

    const getSearchResults = async (query: string) => {
      query = query.trim();
      lastQuery = query;
      suggest.innerHTML = "";

      if (query === "") {
        form.removeAttribute("data-suggested");
      } else {
        form.setAttribute("data-suggested", "");
        suggest.append(renderOmniboxSearchResult(query, query));
      }

      // if (query === "") return;
      // if (query === lastQuery) return;

      const results: string[] = [];

      try {
        abort.abort("aborted due to user input");
        abort = new AbortController();

        switch (searchProvider as SearchProvider) {
          case "bing":
            {
              const res = await sillyfetch(
                "https://www.bing.com/AS/Suggestions?" +
                  new URLSearchParams({
                    qry: query,
                    cvid: "\u0001",
                    bareServer: "", // tell bing that this is HU
                  }),
                {
                  signal: abort.signal,
                }
              );

              if (!res.ok) {
                console.error("error fetching Bing suggestions:", res.status);
                console.error(res.text());
                return;
              }

              const text = await res.text();

              for (const [, phrase] of text.matchAll(
                /<span class="sa_tm_text">(.*?)<\/span>/g
              )) {
                // render the raw HTML to obtain its textContenet
                const lol = document.createElement("div");
                lol.innerHTML = phrase;
                results.push(lol.textContent!.trim());
              }
            }
            break;
          case "duckduckgo":
            {
              const res = await sillyfetch(
                "https://duckduckgo.com/ac/?" +
                  new URLSearchParams({
                    q: query,
                    kl: "wt-wt",
                    bareServer: "", // tell ddg that this is HU
                  }),
                {
                  signal: abort.signal,
                }
              );

              if (!res.ok) {
                console.error(
                  "error fetching DuckDuckGo autocomplete:",
                  res.status
                );
                console.error(res.text());
                return;
              }

              const data = (await res.json()) as { phrase: string }[];

              for (const entry of data) results.push(entry.phrase);
            }
            break;
          default:
            throw new TypeError(`unknown search provider: ${searchProvider}`);
        }
      } catch (err) {
        console.error(err);
      }

      // render the entries and new omnibox
      for (const res of results)
        if (res !== query)
          suggest.append(renderOmniboxSearchResult(res, query));
    };

    inputBar.addEventListener("input", () => {
      getSearchResults(inputBar.value);
    });

    document.addEventListener("astro:page-load", () => {
      resultIndex = -1;
    });
  });
</script>
