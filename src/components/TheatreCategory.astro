---
import TheatreSearchBar from "@components/TheatreSearchBar.astro";
import styles from "@styles/TheatreCategory.module.scss";
import ThemeSelect from "./ThemeSelect.astro";
import { dbEnabled, theatreAPI, theatreAPIMirror } from "@lib/theatre";
import ArrowBackIcon from "@icons/arrow_back_FILL0_wght400_GRAD0_opsz24.svg?react";
import TheatreItem from "./TheatreItem.astro";
import { fetchListData, maxResultsPerPage } from "@lib/renderTheatre";
import ChevronLeft from "@icons/chevron_left_24dp.svg?react";
import ChevronRight from "@icons/chevron_right_24dp.svg?react";

interface Props {
  name: string;
  search?: string;
  category?: string[] | null;
  placeholder?: string;
  isGame?: boolean;
}

const pageParam = Astro.url.searchParams.get("page");
// default to first page
let page = pageParam === null ? 1 : parseInt(pageParam);
if (isNaN(page) || page < 0) page = 1;
// visual offset by 1
page -= 1;

const sortOptions = [
  { name: "Most Popular", value: "mostPopular" },
  { name: "Least Popular", value: "leastPopular" },
  { name: "Name (A-Z)", value: "nameASC" },
  { name: "Name (Z-A)", value: "nameDES" },
];

const sortParam = Astro.url.searchParams.get("sort");
const sort =
  sortParam === null || !sortOptions.some((e) => e.value === sortParam)
    ? "mostPopular"
    : sortParam;

const { category } = Astro.props;

const q = Astro.url.searchParams.get("q");

const data = await fetchListData(
  dbEnabled ? theatreAPI : theatreAPIMirror,
  q,
  category,
  sort,
  page
);

const { isGame } = Astro.props;
const maxPage =
  data === undefined ? -1 : Math.floor(data.total / maxResultsPerPage);
---

<TheatreSearchBar />
<main>
  <section>
    <h1 class="page-title sub">
      {
        isGame && (
          <a class="back-button" href="/theatre/" set:html={ArrowBackIcon} />
        )
      }
      {Astro.props.name}
      <ThemeSelect options={sortOptions} id="sort" value={sort} />
    </h1>
    <div
      class={styles.items}
      id="theatreItems"
      data-category={category}
      data-total={data.total}
      data-sort={sort}
      data-page={page}
    >
      {data.entries.map((e) => <TheatreItem name={e.name} id={e.id} />)}
    </div>
  </section>
  <div
    class={styles.pages}
    data-useless={maxPage === 0 || data.entries.length === 0 || undefined}
    id="pages"
  >
    <div
      class={styles.button}
      id="pageBack"
      set:html={ChevronLeft}
      data-disabled={page === 0 || undefined}
    />
    <div
      class={styles.button}
      id="pageForward"
      set:html={ChevronRight}
      data-disabled={page === maxPage || undefined}
    />
  </div>
</main>
<script>
  import type { ListData } from "@lib/TheatreAPI";
  import {
    getClientTheatreAPI,
    renderTheatreItem,
    maxResultsPerPage,
  } from "@lib/renderTheatre";
  import { fetchListData } from "@lib/renderTheatre";

  const theatreAPI = getClientTheatreAPI();

  const searchParams = new URLSearchParams(location.search);
  const q = searchParams.get("q");

  document.addEventListener("astro:page-load", () => {
    const theatreItems =
      document.querySelector<HTMLDivElement>("#theatreItems");
    if (!theatreItems) return;

    const category = theatreItems.getAttribute("data-category")?.split(",");
    let total = parseInt(theatreItems.getAttribute("data-total")!);
    let page = parseInt(theatreItems.getAttribute("data-page")!);
    let sort = theatreItems.getAttribute("data-sort")!;

    const sortInput = document.querySelector<HTMLInputElement>("#sort")!;

    const fillWithLoading = () => {
      theatreItems.innerHTML = "";
      for (let i = 0; i < maxResultsPerPage; i++)
        theatreItems.append(renderTheatreItem());
    };

    const loadItems = (data: ListData) => {
      theatreItems.innerHTML = "";
      total = data.total;

      if (total === 0) pages.setAttribute("data-useless", "");
      else pages.removeAttribute("data-useless");

      for (const item of data.entries)
        theatreItems.append(renderTheatreItem(item));
    };

    const handleErr = (err: unknown) => {
      console.error(err);
    };

    sortInput.addEventListener("change", () => {
      page = 0;
      sort = sortInput.value;
      const newParams = new URLSearchParams(location.search);
      newParams.delete("page");
      newParams.set("sort", sort);
      const st = newParams.toString();
      history.pushState(
        {},
        "",
        st === "" ? location.pathname : `${location.pathname}?${st}`
      );
      fillWithLoading();
      fetchListData(theatreAPI, q, category, sort, page)
        .then(loadItems)
        .catch(handleErr);
    });

    const pages = document.querySelector<HTMLDivElement>("#pages")!;
    const pageForward = document.querySelector<HTMLDivElement>("#pageForward")!;
    const pageBack = document.querySelector<HTMLDivElement>("#pageBack")!;

    const fetchPage = () => {
      const newParams = new URLSearchParams(location.search);
      newParams.set("sort", sort);
      if (page === 0) newParams.delete("page");
      else newParams.set("page", (page + 1).toString());
      const st = newParams.toString();
      history.pushState(
        {},
        "",
        st === "" ? location.pathname : `${location.pathname}?${st}`
      );
      fetchListData(theatreAPI, q, category, sort, page)
        .then(loadItems)
        .catch(handleErr);

      const maxPage = Math.floor(total / maxResultsPerPage);
      if (page === maxPage) pageForward.setAttribute("data-disabled", "");
      else pageForward.removeAttribute("data-disabled");

      if (page === 0) pageBack.setAttribute("data-disabled", "");
      else pageBack.removeAttribute("data-disabled");
    };

    pageBack.addEventListener("click", () => {
      if (page === 0) return;
      page--;
      fetchPage();
    });

    pageForward.addEventListener("click", () => {
      const maxPage = Math.floor(total / maxResultsPerPage);
      if (page === maxPage) return;
      page++;
      fetchPage();
    });
  });
</script>
