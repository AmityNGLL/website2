---
import VisibilityIcon from "@icons/visibility_FILL1_wght400_GRAD0_opsz24.svg?svgmin";
import VisibilityOffIcon from "@icons/visibility_off_FILL1_wght400_GRAD0_opsz24.svg?svgmin";

type Props = Record<string, any> & {
  id: string;
  inline?: boolean;
  confirm?: string; // ID of another password input that will be used as the confirmation input
  validate?: boolean;
  value?: string;
};

const { id, inline, validate, confirm, value, ...props } = Astro.props;
---

<style>
  .password-field {
    position: relative;
  }

  .password-field.inline {
    display: inline-block;
  }

  .password-field .toggle {
    position: absolute;
    top: 0;
    right: 0;
    margin: auto 0;
    max-width: 20px;
    height: 100%;
    padding: 0 12px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    fill: #333;
  }

  .password-field input[type="password"] ~ .toggle.off {
    display: none;
  }

  .password-field input[type="text"] ~ .toggle.on {
    display: none;
  }
</style>
<div
  class:list={["password-field", inline && "inline"]}
  data-password
  data-validate={validate}
  data-ip
>
  <input
    {...props}
    id={id}
    type="password"
    class="prettyinput"
    data-confirm={confirm}
  />
  <div class="toggle on">
    <VisibilityIcon />
  </div>
  <div class="toggle off">
    <VisibilityOffIcon />
  </div>
</div>
<script>
  import { validatePassword } from "@lib/validation";

  for (const input of document.querySelectorAll<HTMLInputElement>(
    "[data-confirm]"
  )) {
    const confirmId = input.getAttribute("data-confirm");

    if (confirmId) {
      input.form!.addEventListener("submit", (event) => {
        if (input.value.trim() === "") {
          event.preventDefault();
          alert("Please enter a password");
        }
      });
    }
  }

  for (const passwordField of document.querySelectorAll("[data-ip]")) {
    const input = passwordField.querySelector("input")!;
    for (const button of passwordField.querySelectorAll(".toggle"))
      button.addEventListener("click", (e) => {
        input.type = input.type === "password" ? "text" : "password";
        e.preventDefault();
      });

    // quickly change back to password before submit
    input.form!.addEventListener("submit", () => {
      input.type = "password";
    });

    const doValidate = passwordField.hasAttribute("data-validate");
    const confirmId = passwordField.getAttribute("data-confirm");
    const confirmPassword: HTMLInputElement =
      confirmId !== null
        ? document.getElementById(confirmId)
        : (undefined as any);

    if (passwordField.hasAttribute("data-validate")) {
      input.addEventListener("submit", (event) => {
        if (input.value.trim() === "") {
          event.preventDefault();
          alert("Please enter a password.");
        }

        // not only is the button disabled but the input isn't valid
        if (confirmId !== null && confirmPassword.value !== input.value) {
          event.preventDefault();
          alert("Passwords do not match");
        }

        if (doValidate) {
          const error = validatePassword(input.value);

          if (error) {
            event.preventDefault();
            alert(error);
          }
        }
      });
    }
  }
</script>
