---
import VisibilityIcon from "@icons/visibility_FILL1_wght400_GRAD0_opsz24.svg?svgmin";
import VisibilityOffIcon from "@icons/visibility_off_FILL1_wght400_GRAD0_opsz24.svg?svgmin";

type Props = Record<string, any> & {
  id: string;
  inline?: boolean;
  confirm?: string; // ID of another password input that will be used as the confirmation input
  validate?: boolean;
  value?: string;
};

const { id, inline, validate, confirm, value, ...props } = Astro.props;
---

<style>
  .password-field {
    position: relative;
  }

  .password-field.inline {
    display: inline-block;
  }

  .password-field .toggle {
    position: absolute;
    top: 0;
    right: 0;
    margin: auto 0;
    max-width: 20px;
    height: 100%;
    padding: 0 12px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    fill: #333;
  }

  .password-field input[type="password"] ~ .toggle.off {
    display: none;
  }

  .password-field input[type="text"] ~ .toggle.on {
    display: none;
  }
</style>
<div
  class:list={["password-field", inline && "inline"]}
  data-password
  data-validate={validate}
  data-confirm={confirm}
>
  <input {...props} id={id} type="password" class="prettyinput" />
  <div class="toggle on">
    <VisibilityIcon />
  </div>
  <div class="toggle off">
    <VisibilityOffIcon />
  </div>
</div>
<script>
  import { validatePassword } from "@lib/validation";

  for (const passwordField of document.querySelectorAll(`[data-password]`)) {
    const input = passwordField.querySelector("input")!;
    for (const button of passwordField.querySelectorAll(".toggle"))
      button.addEventListener("click", (e) => {
        input.type = input.type === "password" ? "text" : "password";
        e.preventDefault();
      });

    // quickly change back to password before submit
    input.form!.addEventListener("submit", () => {
      input.type = "password";
    });

    if (passwordField.hasAttribute("data-validate")) {
      const checkIfValid = () => {
        // not only is the button disabled but the input isn't valid
        const error =
          input.value.trim() !== "" && validatePassword(input.value);

        if (error) {
          banner.setError(error);
          input.setCustomValidity(error);
        } else {
          banner.reset();
          input.setCustomValidity("");
        }
      };

      input.addEventListener("change", checkIfValid);
    }

    const confirmId = passwordField.getAttribute("data-confirm");

    if (confirmId) {
      const confirmPassword = document.getElementById(
        confirmId
      ) as HTMLInputElement;
      // should only be one input per page that confirms the pw
      const submit = document.querySelector<HTMLInputElement>("#submit")!;

      const checkIfEquals = () => {
        // not only is the button disabled but the input isn't valid
        const match =
          input.value.trim() === "" || confirmPassword.value !== input.value;
        submit.disabled = match;
        submit.title = match ? "Passwords do not match" : "";
        input.setCustomValidity(match ? "Re-enter your password" : "");
      };

      checkIfEquals();
      confirmPassword.addEventListener("keyup", checkIfEquals);
    }
  }
</script>
