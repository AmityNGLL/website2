---
import themeStyles from "@styles/ThemeElements.module.scss";
import appDefs from "@icons/appDefs.svg?react";
import styles from "@styles/ProxyOmnibox.module.scss";
---

<Fragment set:html={appDefs} />
<form class={styles.omnibox} id="theatreSearchBar">
  <div class={`${themeStyles.ThemeInputBar} ${styles.inputBar}`}>
    <div class={themeStyles.icon}>
      <svg>
        <use href="#searchGlass"></use>
      </svg>
    </div>
    <input
      type="text"
      class={themeStyles.thinPadLeft}
      required
      placeholder="Search by game name"
    />
  </div>
  <div class={styles.suggested} id="theatreSuggest"></div>
</form>
<script>
  import { getClientTheatreAPI } from "@lib/renderTheatre";
  import { renderSearchResult } from "@lib/searchResult";
  import { navigate } from "astro:transitions/client";

  const theatreAPI = getClientTheatreAPI();
  const LIMIT = 8;

  function entryClick(this: HTMLDivElement) {
    navigate(this.getAttribute("data-href")!);
  }

  function renderTheatreSearchResult(
    result: string,
    query: string,
    id: string | null,
    categories: string[] | null
  ) {
    const e = renderSearchResult(result, query, categories);
    const href =
      id === null ? `/theatre/?q=${result}` : `/theatre/play?v=${id}`;
    e.setAttribute("data-href", href);
    e.addEventListener("mousedown", entryClick);
    e.addEventListener("touchstart", entryClick);
    return e;
  }

  document.addEventListener("astro:page-load", () => {
    const form = document.querySelector<HTMLFormElement>("#theatreSearchBar")!;
    if (!form) return;
    const suggest = document.querySelector<HTMLDivElement>("#theatreSuggest")!;
    const inputBar = form.querySelector<HTMLInputElement>("input")!;

    let inputFocused = false;
    let resultIndex = -1;

    window.setInputFocused = (newValue: boolean) => {
      inputFocused = newValue;
      const form =
        document.querySelector<HTMLFormElement>("#theatreSearchBar")!;
      const suggest =
        document.querySelector<HTMLDivElement>("#theatreSuggest")!;
      const inputBar = form.querySelector<HTMLInputElement>("input")!;
      if (!form) return;
      resultIndex = -1;
      if (inputFocused) {
        // lastQuery = null
        form.setAttribute("data-focused", "");
        form.setAttribute("data-suggested", "");
        searchTheatre(inputBar.value);
      } else {
        suggest.innerHTML = "";
        form.removeAttribute("data-focused");
        form.removeAttribute("data-suggested");
      }
    };

    form.addEventListener("blur", (event) => {
      if (event.target !== form) setInputFocused(false);
    });

    let searchAbort = new AbortController();

    async function searchTheatre(query: string) {
      const suggest =
        document.querySelector<HTMLDivElement>("#theatreSuggest")!;
      searchAbort.abort("there was a user input");
      searchAbort = new AbortController();

      suggest.innerHTML = "";

      if (query !== "")
        suggest.append(renderTheatreSearchResult(query, query, null, null));

      // if (query === lastQuery) return;
      // lastQuery = query;

      const listResults = await theatreAPI.list(
        {
          sort: "search",
          search: query,
          limit: LIMIT,
        },
        searchAbort.signal
      );

      for (const res of listResults.entries) {
        const cont = document.createElement("a");
        cont.href = "/theatre/play?v=" + res.id;
      }

      //.. get additional results?

      // the input bar may have lost focus by the time this code is reached
      if (inputFocused)
        for (const res of listResults.entries)
          suggest.append(
            renderTheatreSearchResult(res.name, query, res.id, res.category)
          );
    }

    // let lastQuery: string | undefined;

    inputBar.addEventListener("focus", () => {
      setInputFocused(true);
    });

    inputBar.form!.addEventListener("submit", (event) => {
      event.preventDefault();
      const entry = suggest.children[resultIndex] as HTMLAnchorElement;
      if (entry === undefined) {
        if (inputBar.value === "") return;
        // navigate("/theatre/?q=" + encodeURIComponent(inputBar.value));
        setServiceSrc(inputBar.value);
      } else {
        navigate(entry.getAttribute("data-href")!);
      }
      // location.href = "/theatre/?q=" + encodeURIComponent(inputBar.value);
    });

    function updateResults() {
      for (let i = 0; i < suggest.children.length; i++) {
        const e = suggest.children[i];
        if (i === resultIndex) e.setAttribute("data-hover", "");
        else e.removeAttribute("data-hover");
      }
    }

    // up down arrows to navigate entries
    // and redirect to game or 404 when entered is pressed
    inputBar.addEventListener("keydown", (event) => {
      switch (event.code) {
        case "Escape":
          setInputFocused(false);
          break;
        case "ArrowDown":
          event.preventDefault();
          if (resultIndex === suggest.children.length - 1) resultIndex = 0;
          else resultIndex++;
          updateResults();
          break;
        case "ArrowUp":
          event.preventDefault();
          if (resultIndex <= 0) resultIndex = suggest.children.length - 1;
          else resultIndex -= 1;
          updateResults();
          break;
      }
    });

    inputBar.addEventListener("input", () => {
      searchTheatre(inputBar.value);
    });

    setInputFocused(false);
  });
</script>
